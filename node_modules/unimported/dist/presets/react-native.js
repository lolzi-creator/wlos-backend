"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = __importDefault(require("./node"));
const fs_1 = require("../fs");
const meta_1 = require("../meta");
function getEntry(target, rootExtensions) {
    const extensions = [
        ...rootExtensions.map((e) => `.${target}${e}`),
        ...rootExtensions.map((e) => `.native${e}`),
        ...rootExtensions,
    ];
    const [file] = (0, fs_1.resolveFilesSync)(['./index'], extensions);
    if (!file) {
        return;
    }
    return {
        file,
        label: target,
        extend: {
            extensions: extensions,
        },
    };
}
function getExpo(options, rootExtensions) {
    const expoEntry = options.packageJson.main;
    if (!expoEntry) {
        return;
    }
    const [file] = (0, fs_1.resolveFilesSync)([expoEntry], rootExtensions);
    if (!file) {
        return;
    }
    return {
        file,
        label: 'expo',
        extend: {
            extensions: rootExtensions,
        },
    };
}
const preset = {
    name: 'react-native',
    isMatch: ({ hasPackage }) => hasPackage('react-native'),
    getConfig: (options) => __awaiter(void 0, void 0, void 0, function* () {
        const base = yield node_1.default.getConfig(options);
        const extensions = base.extensions;
        const hasExpo = options.hasPackage('expo');
        const entry = [
            getEntry('android', extensions),
            getEntry('ios', extensions),
            hasExpo ? getExpo(options, extensions) : undefined,
        ].filter(meta_1.typedBoolean);
        return Object.assign(Object.assign({}, base), { entry, ignoreUnused: [
                ...base.ignoreUnused,
                'react',
                'react-dom',
                'react-native',
            ] });
    }),
};
exports.default = preset;
