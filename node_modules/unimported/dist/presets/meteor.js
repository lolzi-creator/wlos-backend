"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_1 = __importDefault(require("./node"));
const meta_1 = require("../meta");
const preset = {
    name: 'meteor',
    isMatch: ({ packageJson }) => { var _a; return Boolean((_a = packageJson.meteor) === null || _a === void 0 ? void 0 : _a.mainModule); },
    getConfig: (options) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const base = yield node_1.default.getConfig(options);
        const mainModule = (_a = options.packageJson.meteor) === null || _a === void 0 ? void 0 : _a.mainModule;
        const entry = [mainModule === null || mainModule === void 0 ? void 0 : mainModule.client, mainModule === null || mainModule === void 0 ? void 0 : mainModule.server].filter(meta_1.typedBoolean);
        return Object.assign(Object.assign({}, base), { entry, ignorePatterns: [
                ...base.ignorePatterns,
                'packages/**',
                'public/**',
                'private/**',
                'tests/**',
            ], ignoreUnused: [
                ...base.ignoreUnused,
                '@babel/runtime',
                'meteor-node-stubs',
            ] });
    }),
};
exports.default = preset;
