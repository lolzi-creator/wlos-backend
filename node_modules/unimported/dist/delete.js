"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUnused = void 0;
const fs_1 = require("./fs");
const fs = __importStar(require("./fs"));
function removeUnused(result, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const deleteIsSafe = result.unresolved.length === 0;
        if (!deleteIsSafe) {
            return {
                removedDeps: [],
                deletedFiles: [],
                error: 'Unable to safely remove files and packages while there are unresolved imports.',
            };
        }
        const { removedDeps, error: depsError } = yield removeUnusedDeps(result, context);
        if (depsError) {
            return { removedDeps, deletedFiles: [], error: depsError };
        }
        const { deletedFiles, error: fileError } = yield removeUnusedFiles(result, context);
        return { deletedFiles, removedDeps, error: fileError || depsError };
    });
}
exports.removeUnused = removeUnused;
function removeUnusedFiles(result, context) {
    return __awaiter(this, void 0, void 0, function* () {
        yield Promise.all(result.unimported.map((file) => (0, fs_1.deleteFile)(file, context.cwd)));
        return { deletedFiles: result.unimported };
    });
}
function removeUnusedDeps(result, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const packageJson = yield fs.readJson('package.json', context.cwd);
        if (!packageJson) {
            return { error: 'Unable to read package.json', removedDeps: [] };
        }
        if (!packageJson.dependencies) {
            return { removedDeps: [] };
        }
        const updatedDependencies = Object.fromEntries(Object.entries(packageJson.dependencies).filter(([key]) => !result.unused.includes(key)));
        const updatedPackageJson = Object.assign(Object.assign({}, packageJson), { dependencies: updatedDependencies });
        yield fs.writeJson('package.json', updatedPackageJson, context.cwd);
        return { removedDeps: result.unused };
    });
}
